# ******************************************************************
# Cobbler managed dhcpd.conf file
# Puppet managed dhcpd.template file for node: <%= fqdn %>
#
# generated from cobbler dhcp.conf template ($date)
# Do NOT make changes to /etc/dhcpd.conf. Instead, make your changes
# in /etc/cobbler/dhcp.template, as /etc/dhcpd.conf will be
# overwritten.
#
# ******************************************************************

authoritative;

allow booting;
deny bootp;

ddns-update-style ad-hoc;
ignore client-updates;

set vendorclass = option vendor-class-identifier;

<% if role == "primary" %>
# key primaryserver {
#         algorithm hmac-md5;
#         secret "CHANGEME";
# };
#
# omapi-key primaryserver;
# omapi-port 7911;
#
# failover peer "dhcp-failover" {
#   primary; # declare this to be the primary server
#   address <%= ipaddress %>;
#   port 647;
#   peer address #{SECONDARY_IP};
#   peer port 647;
#   max-response-delay 30;
#   max-unacked-updates 10;
#   load balance max seconds 3;
#   mclt 1800;
#   split 128;
# }

<% elsif role == "secondary" %>
# key secondaryserver {
#     algorithm hmac-md5;
#     secret "CHANGEME";
# };
#
# omapi-key secondaryserver;
# omapi-port 7911;
#
# failover peer "dhcp-failover" {
#   secondary; # declare this to be the secondary server
#   address <%= ipaddress %>;
#   port 647;
#   peer address  #{PRIMARY_IP};
#   peer port 647;
#   max-response-delay 30;
#   max-unacked-updates 10;
#   load balance max seconds 3;
# }
<% end %>

<% networking_subnets.each_pair do |key, data| -%>
subnet <%= data['subnet'] %> netmask <%= data['netmask'] %> {

  option routers                  <%= data['router'] %>;
  option subnet-mask              <%= data['netmask'] %>;
  option broadcast-address        <%= data['broadcast'] %>;
  option domain-name              "<%= data['domainname'] %>";
  option domain-search            "<%= data['dnssearch'] %>";
  option domain-name-servers      <%= data['resolvers'].join(', ') %>;
  option ntp-servers              <%= data['ntpservers'].join(', ') %>;
  filename                        "/pxelinux.0";
  next-server                     <%= ipaddress %>;

  pool  {
    <% if role != "solitary" %>
    failover peer              "dhcp-failover";
    <% end %>
    <% data['ranges'].each do |range| -%>
    range                      <%= range %>;
    <% end -%>
    max-lease-time             7200;
    default-lease-time         3600;
    allow                      unknown-clients;
  }

#for dhcp_tag in $dhcp_tags.keys():
#if $dhcp_tag == "vlan<%= data['vlanid'] %>"
# hosts for Cobbler DHCP tag: $dhcp_tag
        #for mac in $dhcp_tags[$dhcp_tag].keys():
            #set iface = $dhcp_tags[$dhcp_tag][$mac]
  host $iface.name {
    hardware ethernet $mac;
    #if $iface.ip_address:
    fixed-address $iface.ip_address;
    #end if
    #if $iface.hostname:
    option host-name "$iface.hostname";
    #end if
    #if $iface.netmask:
    option subnet-mask $iface.netmask;
    #end if
    #if $iface.gateway:
    option routers $iface.gateway;
    #end if
    filename "$iface.filename";
  }
  #end for
#end if
#end for

}

<% end -%>

#for dhcp_tag in $dhcp_tags.keys():
#if $dhcp_tag == "default"
    ## group could be subnet if your dhcp tags line up with your subnets
    ## or really any valid dhcpd.conf construct ... if you only use the
    ## default dhcp tag in cobbler, the group block can be deleted for a
    ## flat configuration
# group for Cobbler DHCP tag: $dhcp_tag
group {
        #for mac in $dhcp_tags[$dhcp_tag].keys():
            #set iface = $dhcp_tags[$dhcp_tag][$mac]
    host $iface.name {
        hardware ethernet $mac;
        #if $iface.ip_address:
        fixed-address $iface.ip_address;
        #end if
        #if $iface.hostname:
        option host-name "$iface.hostname";
        #end if
        #if $iface.netmask:
        option subnet-mask $iface.netmask;
        #end if
        #if $iface.gateway:
        option routers $iface.gateway;
        #end if
        filename "$iface.filename";
        ##
        ## Cobbler defaults to $next_server, but some users
        ## may like to use $iface.system.server for proxied setups
        next-server $next_server;
        ## next-server $iface.next_server;
    }
        #end for
}
#end if
#end for
